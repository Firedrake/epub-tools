#! /usr/bin/perl

use strict;
use warnings;

use Archive::Zip qw(:CONSTANTS);
use XML::LibXML;
use DBI;
use Getopt::Std;
use File::Find;

my %o;
getopts('p:', \%o);

unless ($o{p}) {
  open (my $mtab, '<', '/etc/mtab');
  while (<$mtab>) {
    chomp;
    my @m = split ' ',$_;
    if (-d $m[1] &&
        -d "$m[1]/.kobo" &&
        -e "$m[1]/.kobo/KoboReader.sqlite") {
      $o{p} = $m[1];
      last;
    }
  }
  close $mtab;
}

unless ($o{p}) {
  die "Can't find Kobo.\n";
}

my $dbh = DBI->connect("dbi:SQLite:dbname=$o{p}/.kobo/KoboReader.sqlite",
                      '','',
                      {AutoCommit => 0}) or die "no DB\n";

my %sth;

$sth{read} = $dbh->prepare('SELECT Series, SeriesID, SeriesNumber, SeriesNumberFloat FROM content WHERE VolumeIndex == -1 AND ContentID == ?');
$sth{write} = $dbh->prepare('UPDATE content SET Series = ?, SeriesID = ?, SeriesNumber = ?, SeriesNumberFloat = ? WHERE VolumeIndex == -1 AND ContentID == ?');

my %epub;
{
  my $pl = length($o{p})+1;
  find(sub{
         if (lc($_) =~ /\.epub$/) {
           my $cid = substr($File::Find::name,$pl);
           $epub{$File::Find::name} = "file:///mnt/onboard/$cid";
         }
       },
       $o{p});
}

my $dirty = 0;

foreach my $epubfile (keys %epub) {
  my $zip = Archive::Zip->new($epubfile);
  unless (defined $zip) {
    warn "bad zip $epubfile\n";
    return;
  }
  my $opf;
  my @o=$zip->membersMatching('container\.xml');
  if (@o) {
    my $cx = $zip->contents($o[0]);
    $cx =~ s/xmlns\s*=\s*"[^"]*"//gi;
    my $c = XML::LibXML->load_xml(string => $cx);
    foreach my $rootfile ($c->findnodes('/container/rootfiles/rootfile')) {
      if ($rootfile->getAttribute('media-type') eq 'application/oebps-package+xml') {
        $opf = $rootfile->getAttribute('full-path');
      }
    }
  } else {
    warn "$epubfile no container.xml\n";
    my @opf = $zip->membersMatching('.*\.opf');
    if (@opf) {
      $opf = $opf[0];
    } else {
      warn "no opf either\n";
      next;
    }
  }
  my $o = XML::LibXML->load_xml(string => '' . $zip->contents($opf));
  my $xpc = XML::LibXML::XPathContext->new($o);
  $xpc->registerNs('x','http://www.idpf.org/2007/opf');
  $xpc->registerNs('dc','http://purl.org/dc/elements/1.1/');
  $xpc->registerNs('calibre','http://calibre.kovidgoyal.net/2009/metadata');
  my $pa;
  foreach my $meta ($xpc->findnodes('/x:package/x:metadata')) {
    $pa ||= $meta;
  }
  my %si;
  foreach my $node ($pa->findnodes('*')) {
    if ($node->nodeName eq 'meta' && $node->hasAttribute('name')) {
      if ($node->getAttribute('name') eq 'calibre:series') {
        $si{series} = $node->getAttribute('content');
      } elsif ($node->getAttribute('name') eq 'calibre:series_index') {
        $si{index} = $node->getAttribute('content');
      }
    }
  }
  unless (exists $si{series} && exists $si{index}) {
    %si = ();
  }
  $sth{read}->execute($epub{$epubfile});
  my @od;
  while (my $a = $sth{read}->fetchrow_arrayref) {
    @od = @{$a};
  }
  my $update = 0;
  if (@od) {                     # have existing series data
    if (%si) {                  # have new data
      if ($od[0] ne $si{series} || $od[2] != $si{index}) { # they don't match
        $update = 1;
      }
    } elsif ($od[0]) {     # existing data, should be blank
      $update = 1;
    }
  } else {                      # no existing data
    warn "unprocessed file $epubfile\n";
  }
  if ($update) {
    $dirty = 1;
    warn "Setting\n$epub{$epubfile}\n$si{series} $si{index}\n";
    $sth{write}->execute(
      $si{series},
      $si{series},
      $si{index},
      0 + $si{index},
      $epub{$epubfile},
        );
  }
}

if ($dirty) {
  $dbh->commit;
}

$dbh->disconnect;
